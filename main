#
#	You must fill in the your name, umail address, and perm number below:  
#	Partner1 first name: Sharon
#	Partner1 last  name: Su
#	Partner1 umail account: sharonjsu@umail.ucsb.edu 
#	Partner1 perm number: 8004939
#	Leave the following blank if you do not have a partner for this assignment. 
#	Otherwise, fill in the partner's name, umail address, and perm number below:
#	Partner2 first name: Max	
#	Partner2 last  name: Gara
#	Partner2 umail account: mgara@umail.ucsb.edu
#	Partner2 perm number: 8334625
#	NOTE:	One and only one partner should turn in the codes for grading. 
#	It does not matter which partner does that; both partners will receive the same score. 
#


# 
# bi-section method 
#
def bs(coef, f, df, eps = 1.0e-10) :			# bisection
        x=-1.0
        while (f3(coef,x) > 0): #lower limit initial
            x = x - 1    
        lower = x
        
        x = 1.0
        
        while(f3(coef,x) < 0): #upper limit initial
            x = x + 1
        upper = x 

        itr = 0
        while (itr<100):
            c = (upper + lower)/2 
            if abs(f3(coef,c)) < eps: #solution found
                print('final approximate solution at: {}' .format(c))
                print('function value at the final solution is: {}' .format(f3(coef,c)))
                return
            else:
                itr = itr + 1
                tuplow = (round(lower, 4), round(f3(coef,lower),4));
                tupmid = (round(c,4), round(f3(coef,c),4));
                tupup = (round(upper,4), round(f3(coef,upper),4));
                
                print ("{:<20}{:<20}{:<20}".format(tuplow, tupmid, tupup))
                if (f3(coef,c)>0):
                    upper = c
                else:
                    lower = c
                

# 
# Newton Raphson method
#
def nr(coef, f, df, eps = 1.0e-10, iGuess = 0.0) :	# newton-raphson
	pass				# replace this line with your codes

#
# 3rd-order function, coefficient of x^3 is normalized to 1 
#
def f3(coef,x) :
	sol = x**3 + coef[0] * x**2 + coef[1]*x + coef[2]
	return sol

#
# derivatives of the 3rd order function
#
def df3(coef,x) :
	dsol = 3*x**2 + 2*coef[0]*x + coef[1]


#
# if necessary, you can define more functions below 
#
